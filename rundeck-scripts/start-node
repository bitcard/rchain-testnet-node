#!/bin/bash
set -e -o pipefail
source "$(dirname $0)/functions"

running_id="$(logcmd docker ps -q -f name='^rnode$')"
if [[ -n "$running_id" ]]; then
	echo "Node is already running"
	exit 0
fi

if [[ -n "$(logcmd docker ps -qa -f name='^rnode$')" ]]; then
	archived_name="rnode.$(date +%s)"
	echo "Existing dead container found, renaming to $archived_name"
	logcmd docker rename rnode $archived_name
fi

logcmd mkdir -p /var/lib/rnode /var/lib/rnode/genesis

try_download_file()
{
	local url="$1" file=/var/lib/rnode-static/$2 status
	if [[ -z "$url" ]]; then
		return 0
	fi
	status="$(logcmd curl -fsSL -w '%{http_code}' -z $file -o $file.new "$url")" || true
	if [[ ( -e $file.new || "$status" == 404 ) && -e $file ]]; then
		logcmd mv $file "$file.bak$(date -Is)"
	fi
	if [[ -e $file.new ]]; then
		logcmd mv $file.new $file
	fi
}

try_download_file "$RD_OPTION_BONDS_FILE_URL" bonds-20-other.txt
try_download_file "$RD_OPTION_WALLETS_FILE_URL" wallets.txt

i=1
while read pk; do
	echo "$pk $((RD_OPTION_BOND_BASE_AMOUNT + 2**i))"
	: $((i++))
done \
	< /var/lib/rnode-static/validator-public-keys.txt \
	> /var/lib/rnode-static/bonds-10-testnet.txt

logcmd 'cat /var/lib/rnode-static/bonds-*.txt >/var/lib/rnode/genesis/bonds.txt'
logcmd ln -sf /var/lib/rnode-static/wallets.txt /var/lib/rnode/genesis/
logcmd ln -sf /var/lib/rnode-static/node.*.pem /var/lib/rnode/

bootstrap_url="$(jq -r .rnode.server.bootstrap </var/lib/rnode-static/rnode.conf)"
bootstrap_hostname="$(sed 's/.*@//; s/?.*//' <<<"$bootstrap_url")"
bootstrap_ip="$(dig +short $bootstrap_hostname A | tail -1)"
echo "Bootstrap IP address: $bootstrap_ip"

if ! iptables -L rnode_init >/dev/null; then
	logcmd iptables -N rnode_init
	logcmd iptables -I INPUT 1 -p tcp -m multiport --dports 40400,40401,40404 -j rnode_init
fi
logcmd iptables -F rnode_init
logcmd iptables -A rnode_init -i lo -j ACCEPT
logcmd iptables -A rnode_init -s $bootstrap_ip -j ACCEPT
logcmd iptables -A rnode_init -p tcp -m conntrack --ctstate ESTABLISHED -j ACCEPT
logcmd iptables -A rnode_init -p tcp -j REJECT --reject-with tcp-reset

logcmd docker pull $RD_OPTION_RNODE_DOCKER_IMAGE || true

start_time="$(date -Is|sed 's/+.*//; s/[^0-9-]/-/g')"
echo "Start time: $start_time"

logcmd docker run -d \
	--name=rnode \
	--network=host \
	--env-file=/var/lib/rnode-static/environment.docker \
	-v /var/lib/rnode:/var/lib/rnode \
	-v /mnt/heapdumps:/mnt/heapdumps \
	-v /var/lib/rnode-static:/var/lib/rnode-static:ro \
	-v /opt/rdoctor:/opt/rdoctor:ro \
	--entrypoint=/opt/rdoctor/rdoctor \
	$RD_OPTION_RNODE_DOCKER_IMAGE \
	/opt/docker/bin/rnode \
	$RD_OPTION_RNODE_LAUNCHER_ARGS \
	-J-Xdebug \
	-J-Xrunjdwp:transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y \
	-XX:+HeapDumpOnOutOfMemoryError \
	-XX:HeapDumpPath="$DUMP_PREFIX.hprof" \
	-XX:ErrorFile="${DUMP_PREFIX}_hs_err.log" \
	-Dlogback.configurationFile=/var/lib/rnode-static/logback.xml \
	-p docker \
	-c /var/lib/rnode-static/rnode.conf \
	run $RD_OPTION_RNODE_RUN_ARGS

i=6
sleep_time=5
echo "Waiting $((i*sleep_time))s for RNode to start"
while (( i )); do
	if [[ -n "$(docker ps -q -f name=rnode)" ]]; then
		echo "RNode is running"
		break
	fi
	sleep $sleep_time
	: $((i--))
done

i=60
sleep_time=10
echo "Waiting $((i*sleep_time))s for approved block"
while (( i )); do
	if [[ -z "$(docker ps -q -f name=rnode)" ]]; then
		echo "RNode is not running" >&2
		exit 1
	fi
	height="$(docker exec rnode ./bin/rnode show-blocks | sed -n '/^count: /{s///;p;q}')" || true
	if (( height )); then
		echo "Found approved block"
		break
	fi
	sleep $sleep_time
	: $((i--))
done

logcmd iptables -F rnode_init

if (( i == 0 )); then
	echo "Did not find approved block" >&2
	exit 1
fi

echo Finished
