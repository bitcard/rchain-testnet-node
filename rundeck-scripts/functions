# vim:ft=sh

export PATH="$(dirname ${BASH_SOURCE[0]}):$PATH"

logcmd()
{
	echo ">> $@" >&2
	eval "$@"
}

get_config_value()
{
	local key
	key="$(sed -r 's/([^\.]+)/"\1"/g' <<<$1)"
	jq -r "$key // \"$2\"" </var/lib/rnode-static/rnode.conf
}

parse_rnode_config()
{
	rnode_grpc_port_external=40401
	rnode_casper_genesis_validator=false
	rnode_casper_required_signatures=0
	rnode_server_port_kademlia=40404
	rnode_server_port=40400
	rnode_server_standalone=false

	rnode_launcher_other_args=
	rnode_run_other_args=

	parse_rnode_config_file
	parse_rnode_launcher_args $RD_OPTION_RNODE_LAUNCHER_ARGS
	parse_rnode_run_args $RD_OPTION_RNODE_RUN_ARGS
}

parse_rnode_config_file()
{
	eval "$(json2env </var/lib/rnode-static/rnode.conf)"
}

parse_rnode_launcher_args()
{
	while (( $# )); do
		case "$1" in
			-g|--grpc-port) rnode_grpc_port_external="$2"; shift ;;
			*) rnode_launcher_other_args+=" ${1@Q}" ;;
		esac
		shift
	done
}

parse_rnode_run_args()
{
	while (( $# )); do
		case "$1" in
			-b|--bootstrap) rnode_server_bootstrap="$2"; shift ;;
			-g|--genesis-validator) rnode_casper_genesis_validator=true ;;
			--kademlia-port) rnode_server_port_kademlia="$2"; shift ;;
			-p|--port) rnode_server_port="$2"; shift ;;
			-r|--required-sigs) rnode_casper_required_signatures="$2"; shift ;;
			-s|--standalone) rnode_server_standalone=true ;;
			*) rnode_run_other_args+=" ${1@Q}" ;;
		esac
		shift
	done
}

print_cli_param()
{
	echo -n " $1 ${!2@Q}"
}

print_cli_flag()
{
	if [[ "${!2}" == true ]]; then
		echo -n " $1"
	fi
}

get_rnode_launcher_args()
{
	echo -n "$rnode_launcher_other_args"
	print_cli_param --grpc-port rnode_grpc_port_external
	echo
}

get_rnode_run_args()
{
	echo -n "$rnode_run_other_args"
	print_cli_param --bootstrap rnode_server_bootstrap
	print_cli_flag  --genesis-validator rnode_casper_genesis_validator
	print_cli_param --kademlia-port rnode_server_port_kademlia
	print_cli_param --port rnode_server_port
	print_cli_param --required-sigs rnode_casper_required_signatures
	print_cli_flag  --standalone rnode_server_standalone
	echo
}

get_hostname_domain()
{
	local fqdn hostname domain
	fqdn="$(hostname -f)"
	if [[ "$fqdn" =~ ^([^\.]+)(\.(.+))?$ ]]; then
		echo "${BASH_REMATCH[1]}" "${BASH_REMATCH[3]:-znodomain}"
	else
		echo "Invalid FQDN: '$fqdn'" >&2
		return 1
	fi
}

get_current_timestamp()
{
	date -Is | sed 's/+.*//; s/[^[:alnum:]-]/-/g'
}

get_diag_tag()
{
	if [[ "$RD_OPTION_DUMP_TAG" ]]; then
		echo "$(echo -n "$RD_OPTION_DUMP_TAG" | tr -C 0-9A-Za-z-_. -)"
	else
		echo "$(get_current_timestamp)"
	fi
}

local_to_remote_diag_directory_sub_path()
{
	local diag_dir="$1" hostname domain tag
	[[ "$diag_dir" ]]
	read hostname domain <<<"$(get_hostname_domain)"
	tag="$(basename $(readlink -e "$diag_dir"))"
	echo "$domain/$tag/$hostname"
}

local_to_remote_diag_directory_path()
{
	echo -n /mnt/heapdumps/
	local_to_remote_diag_directory_sub_path "$@"
}

local_to_remote_diag_directory_url()
{
	local sub_path
	sub_path="$(local_to_remote_diag_directory_sub_path "$@")"
	echo "https://files.rchain-dev.tk/heapdumps/$sub_path/"
}

LOCAL_DIAG_ROOT=/var/lib/rnode-diag
DIAG_DIR=$LOCAL_DIAG_ROOT/current

create_diag_directory()
{
	local tag
	tag="$(get_diag_tag)"
	logcmd mkdir $LOCAL_DIAG_ROOT/$tag
	logcmd rm -f $DIAG_DIR
	logcmd ln -s $LOCAL_DIAG_ROOT/$tag $DIAG_DIR
}

check_diag_directory()
{
	if [[ ! -d $DIAG_DIR ]]; then
		echo "Local path for diagnostic files $DIAG_DIR does not exist" >&2
		echo "Most probably RNode was stopped and/or not yet started." >&2
		return 1
	else
		echo -n "Diagnostic files will be available at "
		local_to_remote_diag_directory_url $DIAG_DIR
	fi
}
